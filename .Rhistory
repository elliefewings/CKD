# Time stamp
Sys.time()
# Clean up
rm(list=ls())
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
library(Seurat)
library(cowplot)
# Folders
setwd("~/Saez/Maurice_Stent/")
load("C:/Users/ellie/OneDrive/Saez/Maurice_Stent/results/integration.de.RData")
# Chunk 1: start_section
# Time stamp
Sys.time()
# Clean up
rm(list=ls())
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
library(Seurat)
library(cowplot)
library(stringr)
# Folders
setwd("~/Saez/Maurice_stent_analysis/")
# Chunk 2: load
load("results/integration.de.RData")
# Chunk 3: clean
rm(list=c(ls(pattern="^stent"), ls(pattern="^avg")))
Idents(data)
types <- c("0"="Fibroblast",
"1"="B-cells",
"2"="T-cells",
"3"="Erythrocytes",
"4"="Endothelial",
"5"="Fibroblast",
"6"="Macrophages",
"7"="VMSC",
"8"="Macrophages",
"9"="Macrophages")
data <- SetIdent(data, value="cluster")
data <- RenameIdents(data, types)
data$celltype <- Idents(data)
data$comp1 <- NA
data$comp1[data$cluster %in% c("1", "2", "6", "8", "9")] <- "immune"
data$comp1[data$cluster %in% c("0", "5", "7")] <- "vsmcfibro"
#endothelial vs vsmc/fibro
data$comp2 <- NA
data$comp2[data$cluster == "4"] <- "endo"
data$comp2[data$cluster %in% c("0", "5", "7")] <- "vsmcfibro"
case <- SetIdent(data, value="cc")
idents(case)
Idents(case)
case <- subset(case, idents="case")
control <- SetIdent(data, value="cc")
control <- subset(control, idents="control")
rna.mx <- case@assays$RNA@data %>% as.matrix()
convertratGeneList <- function(x){
require("biomaRt")
human <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
rat <- useMart("ensembl", dataset = "rnorvegicus_gene_ensembl")
mouse <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 <-  getLDS(attributes = c("rgd_symbol"), filters = "rgd_symbol", values = x , mart = rat, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
humanx <- unique(genesV2[, 2])
return(genesV2)
}
#Create table of converted names
rat <- row.names(rna.mx)
converted <- convertratGeneList(rat)
#Reduce to names that have homolog
case.hg.mx <- rna.mx[row.names(rna.mx) %in% converted$RGD.symbol,]
#Filter gene names to match
converted.r <- converted[converted$RGD.symbol %in% row.names(rna.mx) & !duplicated(converted$RGD.symbol),]
converted.r <- converted.r[order(match(converted.r$RGD.symbol, row.names(case.hg.mx))),]
#Check if the two align
sum(row.names(case.hg.mx) != converted.r$RGD.symbol )
#Add human gene names
row.names(case.hg.mx) <- converted.r$HGNC.symbol
rna.mx <- control@assays$RNA@data %>% as.matrix()
#Create table of converted names
rat <- row.names(rna.mx)
converted <- convertratGeneList(rat)
#Reduce to names that have homolog
control.hg.mx <- rna.mx[row.names(rna.mx) %in% converted$RGD.symbol,]
#Filter gene names to match
converted.r <- converted[converted$RGD.symbol %in% row.names(rna.mx) & !duplicated(converted$RGD.symbol),]
converted.r <- converted.r[order(match(converted.r$RGD.symbol, row.names(control.hg.mx))),]
#Check if the two align
sum(row.names(control.hg.mx) != converted.r$RGD.symbol )
#Add human gene names
row.names(control.hg.mx) <- converted.r$HGNC.symbol
View(control.hg.mx)
View(case.hg.mx)
meta.case <- case@meta.data[, colnames(case@meta.data) %in% c("cc", "comp1")] #%>% subset(select=c(comp1, cc))
View(meta.case)
meta.control <- control@meta.data[, colnames(control@meta.data) %in% c("cc", "comp2")] #%>% subset(select=c(comp2, cc))
write.table(case.hg.mx, "scripts/cellphonedb/count.matrix.case.txt", quote=FALSE, sep="\t")
write.table(meta.case, "scripts/cellphonedb/metadata.case.txt", quote=FALSE, sep="\t")
write.table(control.hg.mx, "scripts/cellphonedb/count.matrix.control.txt", quote=FALSE, sep="\t")
write.table(meta.control, "scripts/cellphonedb/metadata.control.txt", quote=FALSE, sep="\t")
## Load libraries
libs <- c("webshot", "shiny", "gridExtra", "stringr", "optparse", "ggplot2")
for (i in libs) {
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
install.packages(i, repos = "https://ftp.fau.de/cran/")
if (! suppressPackageStartupMessages(suppressWarnings(require(i, character.only = TRUE, quietly = TRUE)))) {
stop(paste("Unable to install package: ", i, ". Please install manually and restart.", sep=""))
}
}
}
if (is.null(webshot:::find_phantom())) {
webshot::install_phantomjs()
}
## Find script directory
initial.options <- commandArgs(trailingOnly = FALSE)
script.dir <- dirname(sub("--file=", "", initial.options[grep("--file=", initial.options)]))
## Get options
option_list <- list(
make_option(c("--input", "-i"), action="store", default="./data/01a_Report/GSM4191941_R.rds", type='character',
help="Path to report RDS created in 'create_seurat.R' (e.g. ./data/01a_Report/sample_R.rds) [required]"),
make_option(c("--output", "-o"), action="store", default="./data/01a_Report/GSM4191941_QC.pdf", type='character',
help="Path to desired output [default = /path/to/input/sample_QC.pdf]")
)
opt2 <- parse_args(OptionParser(option_list=option_list))
## Check for input and output options
if (is.null(opt2$input)) {
message("ERROR: Input missing, please specify input directory with --input, -i flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
} else {
report <- readRDS(opt2$input)
}
# Extract sample name from input
sample <- basename(opt2$input) %>% str_replace_all("_R.rds", "")
if (is.null(opt2$output)) {
opt2$output <- str_replace_all(opt2$input, "_R.rds", "_QC.pdf")
}
# Unlist report
for(objs in names(report)) {
assign(objs, report[[objs]])
}
######################
## Run Shiny Report ##
######################
# Source app functions
source("./src/s01_app.R")
# Create app
app <- shinyApp(ui = ui, server = server)
setwd("C:/Users/ellie/OneDrive/Saez/Pipeline/github/CKD")
option_list <- list(
make_option(c("--input", "-i"), action="store", default="./data/01a_Report/GSM4191941_R.rds", type='character',
help="Path to report RDS created in 'create_seurat.R' (e.g. ./data/01a_Report/sample_R.rds) [required]"),
make_option(c("--output", "-o"), action="store", default="./data/01a_Report/GSM4191941_QC.pdf", type='character',
help="Path to desired output [default = /path/to/input/sample_QC.pdf]")
)
opt2 <- parse_args(OptionParser(option_list=option_list))
## Check for input and output options
if (is.null(opt2$input)) {
message("ERROR: Input missing, please specify input directory with --input, -i flags.")
stop(parse_args(OptionParser(option_list=option_list), args = c("--help")))
} else {
report <- readRDS(opt2$input)
}
# Extract sample name from input
sample <- basename(opt2$input) %>% str_replace_all("_R.rds", "")
if (is.null(opt2$output)) {
opt2$output <- str_replace_all(opt2$input, "_R.rds", "_QC.pdf")
}
# Unlist report
for(objs in names(report)) {
assign(objs, report[[objs]])
}
######################
## Run Shiny Report ##
######################
# Source app functions
source("./src/s01_app.R")
# Create app
app <- shinyApp(ui = ui, server = server)
appshot(app,  opt2$output, delay=10, port = getOption("shiny.port"), vwidth = 1500)
